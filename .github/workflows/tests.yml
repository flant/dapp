name: Main
on:
  issue_comment:
  schedule:
  - cron:  '0 22 * * *'
env:
  GO111MODULE: on

jobs:

  download_go_modules:
    name: Download go modules
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    if: (github.event.issue.pull_request != '' && contains(github.event.comment.body, '/run tests')) || github.event.schedule
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download modules
      run: go mod download
      shell: bash

    - name: Pack go modules
      run: tar -czvf go_modules.tar.gz -C $HOME/go/pkg/mod .
      shell: bash

    # FIXME: https://github.community/t5/GitHub-Actions/Caching-files-between-GitHub-Action-executions/m-p/30974#M630
    - name: Upload go modules artifact
      uses: actions/upload-artifact@master
      with:
        name: go_modules
        path: go_modules.tar.gz

  build:
    name: Build
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Build
      run: go build -tags "dfrunmount dfssh" github.com/flant/werf/cmd/werf
      shell: bash

  unit_tests:
    name: Unit tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/unit_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR
      shell: bash

    - name: Test
      run: go test -tags "dfrunmount dfssh" -coverpkg=./... -coverprofile=$WERF_TEST_COVERAGE_DIR/coverage.out ./cmd/... ./pkg/...
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_tests:
    name: Integration tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        ./scripts/ci/bats.sh
        ./scripts/ci/parallel.sh
        ./scripts/ci/git.sh

        export GOBIN=$GITHUB_WORKSPACE/bin/tests
        go install github.com/onsi/ginkgo/ginkgo
        go install github.com/google/go-containerregistry/cmd/crane # bats tests
        echo "::add-path::$GOBIN"

        ./scripts/tests/werf_with_coverage.sh
      shell: bash

    - name: Test
      run: |
        WERF_TEST_WERF_BINARY_PATH=$GITHUB_WORKSPACE/bin/tests/werf ginkgo --tags integration -keepGoing -p -r integration
        WERF_TEST_K8S_DISABLED=1 bats -r $GITHUB_WORKSPACE/tests --jobs 5
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_k8s_tests:
    name: Integration k8s tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        k8s_version: [1.11, 1.12, 1.13, 1.14, 1.15, 1.16]

    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        ./scripts/ci/git.sh

        export GOBIN=$GITHUB_WORKSPACE/bin/tests
        go install github.com/onsi/ginkgo/ginkgo
        echo "::add-path::$GOBIN"

        ./scripts/tests/werf_with_coverage.sh

        echo ::set-env name=WERF_TEST_K8S_BASE64_KUBECONFIG::$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _))
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_11: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_11 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_12: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_12 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_13: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_13 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_14: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_14 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_15: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_15 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_16: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_16 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        WERF_TEST_WERF_BINARY_PATH=$GITHUB_WORKSPACE/bin/tests/werf ginkgo --tags integration_k8s -keepGoing -p -r integration
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_tests_on_self_hosted_runners:
    name: Integration tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [macos, windows]
    runs-on: [self-hosted, "${{ matrix.os }}"]
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Prepare environment
      run: |
        export GOBIN=$GITHUB_WORKSPACE/bin/tests
        go install github.com/onsi/ginkgo/ginkgo
        echo "::add-path::$GOBIN"

        ./scripts/ci/git.sh
      shell: bash

    - name: Test
      run: ginkgo --tags integration -keepGoing -p -r integration
      shell: bash

  integration_k8s_tests_on_self_hosted_runners:
    name: Integration k8s tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [macos, windows]
        k8s_version: [1.11, 1.12, 1.13, 1.14, 1.15, 1.16]
    runs-on: [self-hosted, "${{ matrix.os }}"]
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Prepare environment
      run: |
        export GOBIN=$GITHUB_WORKSPACE/bin/tests
        go install github.com/onsi/ginkgo/ginkgo
        echo "::add-path::$GOBIN"

        echo ::set-env name=WERF_TEST_K8S_BASE64_KUBECONFIG::$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _))
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_11: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_11 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_12: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_12 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_13: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_13 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_14: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_14 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_15: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_15 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_16: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_16 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        ginkgo --tags integration_k8s -keepGoing -nodes 2 -r integration
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

  upload_coverage:
    name: Upload coverage
    needs:
    - unit_tests
    - integration_tests
    - integration_k8s_tests
#    - integration_tests_on_self_hosted_runners
#    - integration_k8s_tests_on_self_hosted_runners
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download coverage artifact
      uses: actions/download-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

    - name: Upload
      run: |
        export WERF_TEST_COVERAGE_DIR=tests_coverage
        export GIT_BRANCH=${GITHUB_REF:11}
        export GIT_COMMIT_SHA=$GITHUB_SHA
        ./scripts/ci/codeclimate.sh
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
